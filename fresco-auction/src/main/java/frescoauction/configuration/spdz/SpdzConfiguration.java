package frescoauction.configuration.spdz;

import dk.alexandra.fresco.framework.sce.evaluator.EvaluationStrategy;
import lombok.Builder;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import frescoauction.util.Utils;
import frescoauction.configuration.ProtocolConfiguration;

/**
 * Provides a configuration for {@link Utils.ProtocolSuite#Spdz}.
 * That can be build with a Builder which is generated by the Project Lombok library.<br>
 * <pre>{@code
 * // Default configuration (usage example)
 * ProtocolConfiguration config = SpdzConfiguration.builder()
 *         .maxBatchSize(DEFAULT_MAX_BATCH_SIZE)
 *         .maxBitLength(DEFAULT_MAX_BIT_LENGTH)
 *         .modBitLength(DEFAULT_MOD_BIT_LENGTH)
 *         .mascotPrgSeedLength(DEFAULT_MASCOT_PRG_SEED_LENGTH)
 *         .evaluationStrategy(EvaluationStrategy.SEQUENTIAL)
 *         .preProcessingStrategy(Utils.Preprocessing.Dummy)
 *         .build();
 * // is same as:
 * ProtocolConfiguration config = SpdzConfiguration.builder()
 *         .build();
 * </pre>
 */
@Builder
@Getter
@ToString
public class SpdzConfiguration implements ProtocolConfiguration {
    /** Default bit length (is used in default configuration).*/
    public static final int DEFAULT_MAX_BIT_LENGTH = 64;
    /** Default bit length of the mascot prg (pseudo random generator) (is used in default configuration).*/
    public static final int DEFAULT_MASCOT_PRG_SEED_LENGTH = 256;
    /** Default mod bit length (is used in default configuration).*/
    public static final int DEFAULT_MOD_BIT_LENGTH = 128;

    /**
     * Batch size. Default configuration: {@link #DEFAULT_MAX_BATCH_SIZE}
     */
    @Builder.Default
    private int maxBatchSize = DEFAULT_MAX_BATCH_SIZE;

    /** Bit length. Default configuration: {@link #DEFAULT_MAX_BIT_LENGTH}.*/
    @Builder.Default
    private int maxBitLength = DEFAULT_MAX_BIT_LENGTH;

    /** Mod bit length. Default configuration: {@link #DEFAULT_MOD_BIT_LENGTH}.*/
    @Builder.Default
    private int modBitLength = DEFAULT_MOD_BIT_LENGTH;

    /** Bit length of the mascot prg (pseudo random generator). Default configuration: {@link #DEFAULT_MASCOT_PRG_SEED_LENGTH}. */
    @Builder.Default
    private int mascotPrgSeedLength = DEFAULT_MASCOT_PRG_SEED_LENGTH;

    /** Evaluation strategy. Default configuration: {@link EvaluationStrategy#SEQUENTIAL}. */
    @Builder.Default
    private EvaluationStrategy evaluationStrategy = EvaluationStrategy.SEQUENTIAL;

    /** Preprocessing strategy. Default configuration: {@link Utils.Preprocessing#Dummy}. */
    @Builder.Default
    private Utils.Preprocessing preprocessingStrategy = Utils.Preprocessing.Dummy;

    private SpdzConfiguration(int maxBatchSize, int maxBitLength, int modBitLength, int mascotPrgSeedLength,
                              EvaluationStrategy evaluationStrategy, Utils.Preprocessing preprocessingStrategy) {
        this.maxBatchSize = maxBatchSize;
        this.maxBitLength = maxBitLength;
        this.modBitLength = modBitLength;
        this.mascotPrgSeedLength = mascotPrgSeedLength;
        this.evaluationStrategy = evaluationStrategy;
        this.preprocessingStrategy = preprocessingStrategy;
    }
}
